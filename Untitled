function generatePageNumbers(myDocument, indexData, entryData) {

    

    myProgressPanel.close()
    myProgressPanel = new Window('window', 'Recording page numbers...');
    with(myProgressPanel){
        myProgressPanel.myProgressBar = add('progressbar', [12, 12, 480, 20], 0, indexData.length);
    }
    myProgressPanel.show();
    myProgressPanel.myProgressBar.value = 1;

    tmp = ""
    var pageNumber = 2;
    for (var i in indexData) {
        tmp += indexData[i].initial + "\r";
        for (var j in indexData[i].pinyins) {
            tmp += indexData[i].pinyins[j].pinyin;
            tmp += "\t";
            tmp += indexData[i].pinyins[j].words[0][0];
            tmp += "\t";
            while (true) {
                var found = false;
                with (myDocument.pages.item(pageNumber).textFrames.item(0)) {
                    for (var k=0; k<paragraphs.length; k++) {
                        var ind = indexData[i].pinyins[j].words[0][1][0];
                        if (entryData[ind].name == paragraphs[k].contents.substring(0, paragraphs[k].contents.length - 1)) {
                            found = true;
                            break;
                        }
                    }
                }
                if (found) break;
                pageNumber ++;
            }
            tmp += (pageNumber - 1).toString() + "\r";
        }
        myProgressPanel.myProgressBar.value = i;
        myProgressPanel.update();
    }

    with (myDocument.pages.item(0).textFrames.item(0)) {

        parentStory.contents = tmp;

        myProgressPanel.close()
        myProgressPanel = new Window('window', 'Applying styles...');
        with(myProgressPanel){
            myProgressPanel.myProgressBar = add('progressbar', [12, 12, 480, 20], 0, parentStory.paragraphs.length);
        }
        myProgressPanel.show();
        myProgressPanel.myProgressBar.value = 1;

        for (var i=0; i<parentStory.paragraphs.length; i++) {
            if (parentStory.paragraphs[i].length == 2) {
                with (parentStory.paragraphs[i]) {
                    justification = Justification.centerAlign;
                    appliedFont = app.fonts.item("汉仪中宋S");
                    pointSize = 10;

                    spaceBefore = "2mm";
                    spaceAfter = "0.5mm";
                }
            } else {
                with (parentStory.paragraphs[i]) {
                    justification = Justification.leftAlign;
                    appliedFont = app.fonts.item("汉仪中宋S");
                    pointSize = 8;
                    spaceBefore = 0;
                    spaceAfter = 0;

                    tabStops.add({
                        alignment: TabStopAlignment.leftAlign,
                        leader: "",
                        position: tabPosition
                    });
                    tabStops.add({
                        alignment: TabStopAlignment.rightAlign,
                        leader: "",
                        position: textFramePreferences.textColumnFixedWidth
                    })
                }
            }
            myProgressPanel.myProgressBar.value = i;
            myProgressPanel.update();
        }
    }
}


function generateSideboxes(myDocument, indexData, entryData) {
    var currentInitial = "";
    var topDist = 0;

    myProgressPanel.close()
    myProgressPanel = new Window('window', 'Adding sideboxes...');
    with(myProgressPanel){
        myProgressPanel.myProgressBar = add('progressbar', [12, 12, 480, 20], 0, myDocument.pages.length);
    }
    myProgressPanel.show();
    myProgressPanel.myProgressBar.value = 1;

    for (var i = 2; i < myDocument.pages.length; i++) {

        entryInitials = [];

        with (myDocument.pages.item(i).textFrames.item(0)) {
            for (var k=0; k<paragraphs.length; k++) {
                if (paragraphs[k].contents.length == 2 && paragraphs[k].pointSize == 14) {

                    currentInitial = paragraphs[k].contents.substring(0, 1);
                    topDist ++;
                    break;
                }
            }

            for (var k=0; k<paragraphs.length; k++) {
                if (paragraphs[k].pointSize == 12) {
                    found = false;
                    for (var l=0; l<entryInitials.length; l++) {
                        if (entryInitials[l] == paragraphs[k].contents.substring(0, 1)) {
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        entryInitials.push(paragraphs[k].contents.substring(0, 1))
                    }
                }
            }
        }

        var myPageWidth = myDocument.documentPreferences.pageWidth;
        var myPageHeight = myDocument.documentPreferences.pageHeight;
        if(myDocument.pages.item(i).side == PageSideOptions.rightHand){
            var myX1 = myPageWidth - 4.5;
            var myX2 = myPageWidth + 5;
            var myY1 = 10 + topDist * 3;
            var myY2 = 10 + topDist * 3 + 4;

            myDocument.pages.item(i).rectangles.add({
                geometricBounds: [myY1, myX1, myY2, myX2],
                fillColor: "Black",
                fillTint: 20,
                strokeTint: 0
            })

            myX1 = myPageWidth - 3.5;
            myX2 = myPageWidth;
            myY1 = 10 + topDist * 3;
            myY2 = 10 + topDist * 3 + 4;


            txt = myDocument.pages.item(i).textFrames.add({
                geometricBounds: [myY1, myX1, myY2, myX2],
                contents: currentInitial
            })

            txt.paragraphs.item(0).pointSize = 9;
            txt.paragraphs.item(0).justification = Justification.leftAlign;
        }

        entryInitialText = entryInitials.join("");

        if(myDocument.pages.item(i).side == PageSideOptions.leftHand){
            myX1 = 14;
            myX2 = 98;
            myY1 = 6;
            myY2 = 10;

            txt = myDocument.pages.item(i).textFrames.add({
                geometricBounds: [myY1, myX1, myY2, myX2],
                contents: entryInitialText
            })

            with (txt) {
                paragraphs.item(0).pointSize = 8;
                paragraphs.item(0).justification = Justification.leftAlign;
            }
        } else {
            myX1 = 12;
            myX2 = 96;
            myY1 = 6;
            myY2 = 10;

            txt = myDocument.pages.item(i).textFrames.add({
                geometricBounds: [myY1, myX1, myY2, myX2],
                contents: entryInitialText
            })

            with (txt) {
                paragraphs.item(0).pointSize = 8;
                paragraphs.item(0).justification = Justification.rightAlign;
            }

        }

        myProgressPanel.myProgressBar.value = i;
        myProgressPanel.update();
    }
}
